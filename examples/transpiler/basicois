######################################
# Grammaire pour la version française de Basic.
# Note that the only thing that was modified is the keywords, which are translated in French
# We DO not modified the rules and their heads, which are the same as in basic
######################################
# The goal of this grammar is to build a tree in which each node has the rule name as label.
# The rule name is the element before the := sign.
# It can be preceded with some special characters.
######################################
# The ° in front of a rule defines the entry point of the grammar
# The ! in front of a rule means that any %x or $xxx will only be tested and will not appear in the final tree.
# The & in front of a rule means that the rule label will be inserted in the final tree if the number of elements is > 1
# The ^ in front of a rule means that the tree item will not contain the rule label 
######################################
# Comments are introduced with a '#'
######################################
# The ^ is the "or" operator, it selects the appropriate value among different calls
# % is used to check for a specific punctuation while $ checks for a specific string
# [..] encloses a sequence of actions
# We use: ? for optional values, * for zero or any values and + for at least one value
######################################
# Word, astring and anumber are declared outside the grammar (see compiler.lisp)
# Word checks if a string is made of alphabetical or digits characters, starting with a character
# astring checks if it is a string enclosed between ".."
# anumber checks if it is a number
######################################
# Each rule is compiled into one or more LispE functions
# ?,*,+ when used in a rule triggers the creation of a specific function starting with
# ? : O_
# * : S_
# + : P_
######################################

;1 Attend une terminaison "]"
;2 Attend une terminaison ")"
;3 Attend une balise de fermeture pour "données".
;4 Attend une balise de fermeture pour "fonction".
;5 Attend une balise de fermeture pour "si".
;6 Attend une balise de fermeture pour "tantque" ;
;7 Attend une balise de fermeture pour "pour...dans".
;8 Attend une balise fermante pour "pour" ;
;9 Erreur lors de l'analyse d'une méthode

# The ° indicates the entry point of the grammar (the top rule)
°analyse := [function^expressions]+

# Some basic equivalences.
# We will be able to use affiche instead of print in code
@affiche := print
@afficheln := println
@renvoie := return
@interval := range
@empile := push
@dépile := pop
@taille := size
@liref := fread
@écriref := fwrite

@entiers := integers
@réels := numbers
@chaines := strings
@entier := integer
@réel := number
@chaine := string
@extraire := extract

# As dans, ou, et, xou are directly embedded as function calls
# We need some equivalence as well
@dans := in
@ou := or
@et := and
@xou := xor


operator := [%< %<]^[%> %>]^[%^ %^]^[%* %*]^%&^%|^%+^%-^%*^%/^%%^%^

orand := $ou^$et^$xou

comparator := [%< %>]^[%< %=]^[%= %=]^[%> %=]^%<^%>^$dans

comparison := computing comparator computing [orand comparison]*

!minus := %- anumber

# We have different types of variable:

!indexes := computing [%, computing]*

!setdimvariable :=  Word %[ ;1 indexes %]
!setdimvariablestring :=  Word %$ %[ ;1 indexes %]

!dimvariable := Word %[ ;1 indexes %]
!dimvariablestring := Word %$ %[ ;1 indexes %]
!stringvariable := Word %$
variable := Word

!variables := [stringvariable^variable] [%, [stringvariable^variable]]*

!call := [lambda^Word] %( ;2 [computing [%, computing]*]? %)

!method := [dimvariablestring^dimvariable^stringvariable^variable] %. ;9 Word %( ;2 [computing [%, computing]*]? %)

!assignment := [setdimvariablestring^setdimvariable^stringvariable^variable] %= computing

!dim :=  $DIM Word %[ ;1 indexes %]
!dimstring :=  $DIM Word %$ %[ ;1 indexes %]

!parenthetic := %( ;2 computing %)

!data := $données ;3 computing [%, computing]* $findonnées

# We put a ^ to avoid building a sub-list (callitem ...) for each element, we simply return the result as such
# It keeps the final tree flatter
^callitem := method^call^lambda^parenthetic^data^astring^minus^anumber^dimvariablestring^dimvariable^stringvariable^variable

# The & will skip the computing label if there is no operator
&computing := callitem  [operator callitem]*

body := expressions+
!arguments := computing [%, computing]*

# print 10+20, 30+40

!multiop := Word computing [%, computing]*

# We put a ^ to avoid building a sub-list (expression ...) for each element, we simply return the result as such
^expressions := method^call^lambda^dimstring^dim^assignment^forin^for^if^while^multiop^computing

!then := $Alors expressions+
!else := $Sinon expressions+

!function := $Fonction ;4 Word %( ;2 variables? %) expressions+ $FinFonction

!lambda := %[ ;1 %( ;2 variables? %) body %]

!if := $Si ;5 comparison then else? $FinSi
!while := [$tantque^[$tant $que]] ;6 comparison expressions+ $FinTantQue
!forin := $Pour [stringvariable^variable] $dans ;7 callitem expressions+ $FinPour
!for := $Pour ;8 assignment %, comparison %, assignment expressions+ $FinPour







